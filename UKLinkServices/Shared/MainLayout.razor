@inherits LayoutComponentBase
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<div class="page">
    <div class="sidebar">
        <NavMenu filterleftNavs="@filterleftNavs" SelectedMenu="@SelectedMenu" />
    </div>
    <div class="main">
        <div class="content px-4 ">
            <UKLinkHeader filterleftNavs="@filterleftNavs"></UKLinkHeader>
        </div>
        <div class="content px-4">
            @Body
            <Role roleDatas="@roleDatas" RoleChange="@RoleChange"></Role>
        </div>
        <div class="content px-4">
            <Footer></Footer>
        </div>

    </div>

</div>
@code {
    private bool collapseNavMenu = true;
    private string selectedLeftNav;
    public List<LeftNavMenu> store;
    private List<LeftNavMenu> leftNavs;
    private RoleData[] roleDatas;
    

    [Parameter]
    public List<LeftNavMenu> filterleftNavs { get; set; }

    protected override async Task OnInitializedAsync()
    {
        leftNavs = await Http.GetFromJsonAsync<List<LeftNavMenu>>("sample-data/left-nav-menu.json");

        roleDatas = await Http.GetFromJsonAsync<RoleData[]>("sample-data/role-data.json");

        filterleftNavs = leftNavs;
        leftNavMenus(true);
    }

    void SelectedMenu(string selectedNav)
    {
        selectedLeftNav = selectedNav;
        leftNavMenus(false);
    }

    List<LeftNavMenu> leftNavMenus(bool initialLoad)
    {
        foreach (var leftNav in filterleftNavs)
        {
            if (initialLoad && leftNav.menuName == "Home")
            {
                leftNav.BreadcrumbclassName = "completed";
            }
            else if (selectedLeftNav == leftNav.menuName)
            {
                leftNav.BreadcrumbclassName = "completed";
            }
            else
            {
                leftNav.BreadcrumbclassName = "";
            }
        }

        return filterleftNavs;
    }

    void RoleChange(string selectedroleId)
    {

        if (!string.IsNullOrWhiteSpace(selectedroleId))
        {
            if (store == null)
            {
                store = new List<LeftNavMenu>();

                for (var i = 0; i < leftNavs.Count; i++)
                {
                    var menu = leftNavs[i];

                    store.Add(new LeftNavMenu { menuName = menu.menuName, RoleId = menu.RoleId, className = menu.className, href = menu.href, MenueId = menu.MenueId, BreadcrumbclassName = menu.BreadcrumbclassName });

                }
            }
            filterleftNavs.Clear();
            filterleftNavs.TrimExcess();

            for (var i = 0; i < store.Count; i++)
            {
                var menu = store[i];
                if (Array.IndexOf(menu.RoleId, Convert.ToInt32(selectedroleId)) >= 0)
                {

                    filterleftNavs.Add(new LeftNavMenu { menuName = menu.menuName, RoleId = menu.RoleId, className = menu.className, href = menu.href, MenueId = menu.MenueId, BreadcrumbclassName = menu.BreadcrumbclassName });
                }

            }
            StateHasChanged();
        }

    }
}