@page "/broadcast"
@using Microsoft.Extensions.Logging
@inject ILogger<Broadcast> Logger
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using System.IO
@inject HttpClient Http


<ConnonMesage SuccessMsg="@message" MsgType="@messageType"></ConnonMesage>

<EditForm Model="@broadcast" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-sm-2"><div class="card-header">Details</div></div>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-sm-3">
                    Date
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        <InputDate @bind-Value="broadcast.details.BroadcastDate" class="form-control" />
                    </div>
                </div>
                <div class="col-sm-3">
                    Urgent
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        <InputCheckbox @bind-Value="broadcast.details.Urgent"  />
                    </div>
                </div>
            </div>
            <div class="row row-padding">
                <div class="col-sm-3"> <label for="exampleFormControlInput1">Delivery Option</label></div>
                <div class="col-sm-3">
                    <div class="form-group">
                        <InputSelect @bind-Value="broadcast.details.DeliveryOption" class="form-control">
                            <option value="">-Select-</option>
                            <option value="AirTel">Fedex</option>
                            <option value="AT&T">AT&T</option>
                            <option value="Lyca">LaycaMobile</option>
                        </InputSelect>
                    </div>
                </div>
                <div class="col-sm-3">  <label for="exampleFormControlInput1">Broadcast Reason</label></div>
                <div class="col-sm-3">
                    <div class="form-group">
                        <InputSelect @bind-Value="broadcast.details.BroadcastReason" class="form-control">
                            <option value="">-Select-</option>
                            <option value="AirTel">AirTel</option>
                            <option value="AT&T">AT&T</option>
                            <option value="Lyca">LaycaMobile</option>
                        </InputSelect>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row row-padding">
        <div class="col-sm-2"><div class="card-header">Message</div></div>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-sm-3">
                    <label for="exampleFormControlTextarea1">Link</label>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        <div class="form-group">
                            <InputTextArea Id="MsgDesc" Class="form-control" @bind-Value="@broadcast.Link"></InputTextArea>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        You have 100 charchters remaining.
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row row-padding">
        <div class="col-sm-2"><div class="card-header">Address request</div></div>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-sm-3">
                    <label for="exampleFormControlTextarea1">Upload File -</label>
                </div>
                <div class="col-sm-3">
                    <InputFile OnChange="OnInputFileChange" multiple />

                </div>
                <div class="col-sm-6">
                    <div class="form-group">

                        <button type="button" @onclick="Upload">Upload File</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row btn-row-padding">
        <div class="col-sm-4"><button type="submit" class="btn btn-primary">Submit</button> 
         <button type="button" class="btn btn-primary">Back</button></div>
    </div>
     
</EditForm>
@code{
    private string currentUrl;
    private Models.Broadcast broadcast = new();
    string Message = "No file(s) selected";
    IReadOnlyList<IBrowserFile> selectedFiles;
    string message = "Broadcast page loaded!";
    string messageType = "";

    protected override void OnInitialized()
    {

        broadcast.details = new Details();
        broadcast.details.Urgent = true;
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }

    private async void Upload()
    {
        foreach (var file in selectedFiles)
        {
            Stream stream = file.OpenReadStream();
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            stream.Close();

            UploadedFile uploadedFile = new UploadedFile();
            uploadedFile.FileName = file.Name;
            uploadedFile.FileContent = ms.ToArray();
            ms.Close();

          var res=  await Http.PostAsJsonAsync
    ("https://localhost:44397/ProductsDetails/Post", uploadedFile);
        }
        Message = $"{selectedFiles.Count} file(s) uploaded on server";
        this.StateHasChanged();

    }

    private void HandleValidSubmit()
    {
        try
        {
            var brd= broadcast;
            Logger.LogInformation("HandleValidSubmit called");
            message = "Successfully created dmsp details.";
            messageType = "success";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = ex.ToString();
            messageType = "error";
        }
    }

    protected void HandleInvalidSubmit()
    {
        messageType = "validation";
        message = DateTime.Now + " Handle invalid submit";
    }
}