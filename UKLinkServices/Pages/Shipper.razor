@page "/shipper"
@inject NavigationManager NavigationManager
@using Microsoft.Extensions.Logging
@inject ILogger<Shipper> Logger
<ConnonMesage SuccessMsg="@message" MsgType="@messageType"></ConnonMesage>
<div class="card">
    <div class="card-body">
        <h5 class="card-title">Shipper</h5>
        <EditForm Model="@starship" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="exampleFormControlInput1">Identifier</label>
                <InputText @bind-Value="starship.Identifier" class="form-control" />
            </div>

            <div class="form-group">
                <label for="exampleFormControlTextarea1">Primary Classification</label>
                <InputSelect @bind-Value="starship.Classification" class="form-control">
                    <option value="">Select classification ...</option>
                    <option value="DMSP">DMSP</option>
                    <option value="Shipper">Shipper</option>
                    <option value="Network">Network</option>
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="exampleFormControlTextarea1">Engineering Approval</label>
                <InputDate @bind-Value="starship.ProductionDate" class="form-control" />
            </div>

            <button type="submit" class="btn btn-primary">Submit</button>

        </EditForm>
    </div>
</div>

@code {
    private Models.Shipper starship = new() { ProductionDate = DateTime.UtcNow };
    private string currentUrl;

    string message = "Shipper page loaded!";
    string messageType = "info";
    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.Uri;
    }
    private void HandleValidSubmit()
    {
        try
        {
            Logger.LogInformation("HandleValidSubmit called");
            message = "Successfully created shipping details.";
            messageType = "success";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = ex.ToString();
            messageType = "error";
        }
    }

    protected void HandleInvalidSubmit()
    {
        messageType = "validation";
        message = DateTime.Now + " Handle invalid submit";
    }
}

