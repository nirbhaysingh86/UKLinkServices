@page "/search"
@using Microsoft.Extensions.Logging
@inject ILogger<Search> Logger
 
<ConnonMesage SuccessMsg="@message" MsgType="@messageType"></ConnonMesage>
<EditForm Model="@search" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-sm-2"><div class="card-header">Search Criteria</div></div>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <div class="row">
                    <div class="col-sm-4">
                        <InputRadioGroup @bind-Value="search.SearchType"   >
                            @foreach (var option in rdOptions)
                            {
                            <span class="searchBottom"><InputRadio Value="option"  @onchange="RadioSelection"   /> @option</span>   
                            }
                        </InputRadioGroup>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>


@code{

    private string currentUrl;
    public string SelectedValue { get; set; } = "AspNetCore";
    Models.Search search = new Models.Search()
    {
        SearchType = "MPRN" // default value
    };
    List<string> rdOptions = new List<string> { "MPRN", "Address" };
    string message = "Search page loaded!";
    string messageType = "";

    protected override void OnInitialized()
    {

    }

    string RadioValue = "aspnetcore";
    void RadioSelection(ChangeEventArgs args)
    {
        RadioValue = args.Value.ToString();
    }

    private void HandleValidSubmit()
    {
        try
        {
            Logger.LogInformation("HandleValidSubmit called");
            message = "Successfully created network details.";
            messageType = "success";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = ex.ToString();
            messageType = "error";
        }
    }

    protected void HandleInvalidSubmit()
    {
        messageType = "validation";
        message = DateTime.Now + " Handle invalid submit";
    }
}